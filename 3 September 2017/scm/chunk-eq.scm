(define (chunk-eq lst)
  (if (< (length lst) 2) (list lst)
      (let ((rest (chunk-eq (cdr lst)))
           (x    (car lst)))
           (if (eq? x (caar rest)) (cons (cons x (car rest)) (cdr rest))
               (cons (list x) rest)))))

(chunk-eq `(0 1 1 1 2 4 5 3 3 3 2))
(chunk-eq `())
(chunk-eq `(0))
(chunk-eq `(0 0))
(chunk-eq `(0 1 0))
(chunk-eq `(0 1 1))
(chunk-eq `(0 1 2 3 4))
